name: Docker Image CI - Develop Branch

on:
  push:
    branches: [develop]

jobs:
  build-ros-robot-x86-64:
    name: "Build ROS robot X86/64"
    runs-on: ubuntu-latest
    env:
      BASE_IMAGE: "ros:melodic-robot"
      ARCH: x86
      TARGET_TYPE: robot
      TARGET_VERSION: develop
      IMAGE_NAME: sonia_msgs
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Build the docker image (robot based)
        run: |
          docker build . --tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S') --build-arg BASE_IMAGE=${BASE_IMAGE}

      - name: Run Module Unit Test
        run: |
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}

      - name: Push Image to Github Packages Registry
        run: |
          docker push ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:${ARCH}-${TARGET_TYPE}-${TARGET_VERSION}

  build-ros-robot-arm64:
    name: "Build ROS robot ARM64"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sonia_msgs_robot_arm64
      DOCKERFILE: Dockerfile-robot
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Enable Docker Daemon Experimental Features
        run: |
          sudo rm /etc/docker/daemon.json
          echo '{"experimental": true , "cgroup-parent": "/actions_job" }' | sudo tee -a /etc/docker/daemon.json
          sudo service docker restart
          docker version

      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build the docker image (robot based)
        run: |
          docker build . --file ${DOCKERFILE} --platform arm64 --tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S')

      - name: Run Module Unit Test
        run: |
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

      - name: Push Image to Github Packages Registry
        run: |
          docker push ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

  build-ros-robot-l4t-arm64:
    name: "Build ROS robot L4T ARM64 (NVIDIA XAVIER)"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sonia_msgs_robot_l4t_arm64
      DOCKERFILE: Dockerfile-robot-l4t-arm64
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build the docker image (robot based)
        run: |
          docker build . --file ${DOCKERFILE} --tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S')

      - name: Run Module Unit Test
        run: |
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

      - name: Push Image to Github Packages Registry
        run: |
          docker push ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

  build-ros-perception-x86-64:
    name: "Build ROS perception X86/64"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sonia_msgs_perception_x86_64
      DOCKERFILE: Dockerfile-perception
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Build the docker image (perception based)
        run: |
          docker build . --file ${DOCKERFILE} --tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S')

      - name: Run Module Unit Test
        run: |
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

      - name: Push Image to Github Packages Registry
        run: |
          docker push ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

  build-ros-perception-arm64:
    name: "Build ROS perception AMR64"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sonia_msgs_perception_arm64
      DOCKERFILE: Dockerfile-perception
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Enable Docker Daemon Experimental Features
        run: |
          sudo rm /etc/docker/daemon.json
          echo '{"experimental": true , "cgroup-parent": "/actions_job" }' | sudo tee -a /etc/docker/daemon.json
          sudo service docker restart
          docker version

      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build the docker image (perception based)
        run: |
          docker build . --file ${DOCKERFILE} --platform arm64 --tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S')

      - name: Run Module Unit Test
        run: |
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

      - name: Push Image to Github Packages Registry
        run: |
          docker push ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

  build-ros-perception-l4t-arm64:
    name: "Build ROS perception L4T ARM64 (NVIDIA XAVIER)"
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: sonia_msgs_perception_l4t_arm64
      DOCKERFILE: Dockerfile-perception-l4t-arm64
      GITHUB_REMOTE_URL: docker.pkg.github.com/${{ github.repository }}
    steps:
      - uses: actions/checkout@v2
      - name: Install QEMU to be able to compile on X86 into ARM64
        run: |
          sudo apt-get install qemu binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Build the docker image (perception based)
        run: |
          docker build . --file ${DOCKERFILE}  --tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} --build-arg BUILD_DATE=$(date '+%Y-%m-%d_%H:%M:%S') --build-arg VERSION=${GITHUB_REF##*/}-$(date '  +%Y-%m-%d_%H:%M:%S')

      - name: Run Module Unit Test
        run: |
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make run_tests
          docker run build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} catkin_make tests

      - name: Login to Github Package Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Create Docker Image Tag
        run: |
          docker tag build-develop-${GITHUB_REF##*/}-${GITHUB_RUN_NUMBER} ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

      - name: Push Image to Github Packages Registry
        run: |
          docker push ${GITHUB_REMOTE_URL}/${IMAGE_NAME}:develop

  notify-success:
    name: "Notify Slack - Success"
    runs-on: ubuntu-latest
    needs:
      [
        build-ros-robot-x86-64,
        build-ros-robot-arm64,
        build-ros-robot-l4t-arm64,
        build-ros-perception-x86-64,
        build-ros-perception-arm64,
        build-ros-perception-l4t-arm64,
      ]
    if: success()
    steps:
      - name: Notify Slack Success
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-ci-notifications
          status: SUCCESS
          color: good

  notify-fail:
    name: "Notify Slack - Failure"
    runs-on: ubuntu-latest
    needs:
      [
        build-ros-robot-x86-64,
        build-ros-robot-arm64,
        build-ros-robot-l4t-arm64,
        build-ros-perception-x86-64,
        build-ros-perception-arm64,
        build-ros-perception-l4t-arm64,
      ]
    if: failure()
    steps:
      - name: Notify Slack Fail
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: github-ci-notifications
          status: FAILED
          color: danger
